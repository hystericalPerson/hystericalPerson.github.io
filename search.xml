<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【深一丢丢】let和const的理解补充</title>
      <link href="/2021/12/13/let%E5%92%8Cconst%E7%9A%84%E7%90%86%E8%A7%A3%E8%A1%A5%E5%85%85/"/>
      <url>/2021/12/13/let%E5%92%8Cconst%E7%9A%84%E7%90%86%E8%A7%A3%E8%A1%A5%E5%85%85/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在掘金上看到很多人在作用域上的理解。但是发现每个人描述的都有些区别并且和自己理解中的有些不同。<br>在查找相关资料后，整理了一下let和const的理解补充</p><h2 id="let，const到底有没有声明变量提升"><a href="#let，const到底有没有声明变量提升" class="headerlink" title="let，const到底有没有声明变量提升"></a>let，const到底有没有声明变量提升</h2><p><strong>结论：</strong> 有</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><h4 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h4><p>首先需要理解执行上下文，词法环境，变量环境的抽象概念。（此文章不做说明）  </p><p><strong>重点：</strong>在 ES6 中，<strong>词法环境</strong>和<strong>变量环境</strong>的一个不同就是前者被用来<strong>存储函数声明和变量（let 和 const）绑定</strong>，而后者只用来<strong>存储 var 变量绑定</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let a = 20;</span><br><span class="line">const b = 30;</span><br><span class="line">var c;</span><br><span class="line"></span><br><span class="line">function multiply(e, f) &#123;</span><br><span class="line"> var g = 20;</span><br><span class="line"> return e * f * g;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c = multiply(20, 30);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行上下文看起来像这样：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">GlobalExectionContext = &#123;</span><br><span class="line"></span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Object&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">      a: &lt; uninitialized &gt;,</span><br><span class="line">      b: &lt; uninitialized &gt;,</span><br><span class="line">      multiply: &lt; func &gt;</span><br><span class="line">    &#125;</span><br><span class="line">    outer: &lt;null&gt;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  VariableEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Object&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">      c: undefined,</span><br><span class="line">    &#125;</span><br><span class="line">    outer: &lt;null&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FunctionExectionContext = &#123;</span><br><span class="line">  ThisBinding: &lt;Global Object&gt;,</span><br><span class="line"></span><br><span class="line">  LexicalEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">      Arguments: &#123;0: 20, 1: 30, length: 2&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">VariableEnvironment: &#123;</span><br><span class="line">    EnvironmentRecord: &#123;</span><br><span class="line">      Type: &quot;Declarative&quot;,</span><br><span class="line">      // 在这里绑定标识符</span><br><span class="line">      g: undefined</span><br><span class="line">    &#125;,</span><br><span class="line">    outer: &lt;GlobalLexicalEnvironment&gt;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>let</code>  和 <code>const</code> 定义的变量并没有关联任何值，但 <code>var</code> 定义的变量被设成了 <code>undefined</code>。  </p><p>这是因为在创建阶段时，引擎检查代码找出变量和函数声明，虽然函数声明完全存储在环境中，但是变量最初设置为<code> undefined（var 情况下）</code>，或者<code>未初始化（let 和 const 情况下）</code>。  </p><p>这就是为什么可以在声明之前访问 <code>var</code> 定义的变量（虽然是 undefined），但是在声明之前访问 <code>let</code> 和 <code>const</code> 的变量会得到一个引用错误。  </p><p>这就是变量声明提升。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>一个变量有三个操作：</p><ol><li><code>声明(提到作用域顶部)</code></li><li><code>初始化(赋默认值)</code></li><li><code>赋值(继续赋值)</code>。   </li></ol><p><strong>var</strong>：一开始变量声明提升，然后初始化成undefined，代码执行到那行的时候赋值。<br><strong>let</strong>：一开始变量声明提升，然后没有初始化分配内存，代码执行到那行初始化，之后对变量继续操作是赋值。<strong>因为没有初始化分配内存，所以会报错，这是暂时性死区。</strong><br><strong>const：</strong>只有声明和初始化，没有赋值操作，所以不可变。</p>]]></content>
      
      
      <categories>
          
          <category> 深一丢丢 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【可视化】流程图-X6</title>
      <link href="/2021/12/10/%E6%B5%81%E7%A8%8B%E5%9B%BE-X6/"/>
      <url>/2021/12/10/%E6%B5%81%E7%A8%8B%E5%9B%BE-X6/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一个简易版自定义流程图编辑器，antV-X6 + vue3 实现。<br><img src="/images/flow/img1.png" alt="路程图页面"></p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/hystericalPerson/vue3-x6-editor-demo">项目地址</a><br><a href="https://github.com/hystericalPerson/vue3-x6-editor-demo">https://github.com/hystericalPerson/vue3-x6-editor-demo</a></p><h2 id="组件结构"><a href="#组件结构" class="headerlink" title="组件结构"></a>组件结构</h2><p>流程图组件由三部分组件构成：</p><ul><li>左侧流程子组件 <code>dnd</code></li><li>中间画布组件 <code>graph</code></li><li>右侧节点信息组件<code>nodeInfo</code></li></ul><p><strong>注意</strong>：左侧的流程子组件可以从<code>dnd</code>和<code>step</code>中选择一个。按照需要业务需要选择内置组件</p><ul><li><code>dnd</code>组件拓展性强，基本由前端自己控制样式等，可选择vue或react等语言开发</li><li><code>step</code>组件拓展性弱，是X6自身已封装好的组件，方便开发</li></ul><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><ol><li><p>首先在组件index.vue中设置三个组件的ref以及一个流程对象（将流程对象统一管理，方便后续维护开发）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 定义ref</span><br><span class="line">const refDnd = ref(null)</span><br><span class="line">const refGraph = ref(null)</span><br><span class="line">const refNodeInfo = ref(null)</span><br><span class="line"></span><br><span class="line">// 定义流程对象</span><br><span class="line">const flow = reactive(&#123;</span><br><span class="line">    graph: null,</span><br><span class="line">    dnd: null,</span><br><span class="line">    nodeInfo: null</span><br><span class="line">&#125;)</span><br><span class="line">provide(&#x27;flow&#x27;, flow)</span><br></pre></td></tr></table></figure></li><li><p>在能获取DOM（vue中<code>onMounted</code>）的情况下，执行<code>graph</code>的<code>init</code>。graph的代码基本都在init中声明</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// graph init</span><br><span class="line">const init = () =&gt; &#123;</span><br><span class="line">    onCreateGraph()</span><br><span class="line">    onBindKey()</span><br><span class="line">    onBindPortsSetting()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在处理完2之后。执行<code>dnd.vue</code>的 <code>init</code>函数，然后将基本组件的拖拽事件绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 初始化</span><br><span class="line">const init = () =&gt; &#123;</span><br><span class="line">    onCreateDnd()</span><br><span class="line">    onRegisterV3Comp()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 创建dnd</span><br><span class="line">const createDnd = () =&gt; &#123;</span><br><span class="line">    editor.dnd = new Addon.Dnd(&#123;</span><br><span class="line">        target: editor.graph,</span><br><span class="line">        getDropNode: (node) =&gt; &#123;</span><br><span class="line">            const cloneNode = node.clone(&#123; keepId: true &#125;)</span><br><span class="line">            cloneNode.data = cmptCellInfo[cloneNode.id]</span><br><span class="line">            // 清空选区</span><br><span class="line">            nextTick(() =&gt; &#123;</span><br><span class="line">                editor.graph.resetSelection(cloneNode)</span><br><span class="line">                cellClickCallback(cloneNode)</span><br><span class="line">            &#125;)</span><br><span class="line">            return cloneNode</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在创建vue组件的时候由于<code>template</code>覆盖了许多子组件的数据，因此在外部定义一个存储各个节点data的对象用于存储数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">// 创建vue3组件</span><br><span class="line">const onRegisterV3Comp = () =&gt; &#123;</span><br><span class="line">    for (const item in nodeInfo) &#123;</span><br><span class="line">        Graph.registerVueComponent(`$&#123;item&#125;`, &#123;</span><br><span class="line">            template: `&lt;$&#123;item&#125; :info=&quot;allNodeData[currentId]&quot;&gt;&lt;/$&#123;item&#125;&gt;`,</span><br><span class="line">            components: &#123;</span><br><span class="line">                [item]: nodeCmpt[item]</span><br><span class="line">            &#125;,</span><br><span class="line">            data () &#123;</span><br><span class="line">                return &#123;</span><br><span class="line">                    flow: flow,</span><br><span class="line">                    allNodeData: flow.allNodeData,</span><br><span class="line">                    currentId: &#x27;&#x27;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            mounted () &#123;</span><br><span class="line">                this.currentId = this.$el.closest(&#x27;[data-shape=vue-shape]&#x27;).getAttribute(&#x27;data-cell-id&#x27;)</span><br><span class="line">                if (!this.flow.allNodeData[this.currentId]) &#123;</span><br><span class="line">                    this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item))</span><br><span class="line">                    cellNodeInfo.value &amp;&amp; (this.flow.allNodeData[this.currentId] = cloneDeep(cellNodeInfo.value))</span><br><span class="line">                    !cellNodeInfo.value &amp;&amp; (this.flow.allNodeData[this.currentId] = cloneDeep(defaultConfig(item)))</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, true)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>处理右侧节点信息展示的双向绑定</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;a-input v-model:value=&quot;flow.nodeInfo.name&quot; addon-before=&quot;名称&quot; class=&quot;info-input&quot;/&gt;</span><br><span class="line">&lt;a-input v-model:value=&quot;flow.nodeInfo.config&quot; addon-before=&quot;额外配置&quot; class=&quot;info-input&quot;/&gt;</span><br></pre></td></tr></table></figure><p>拓展业务可以从<code>flow.nodeInfo</code>对象中自己处理</p></li></ol><p><strong>注意</strong>：处理好选中和未选中的情况</p><ol start="5"><li>增加保存子节点和流程图的按钮和函数</li></ol><p><strong>用push即可</strong></p><ol start="6"><li>在打开流程库的时候，使用遍历节点的方式将信息赋值到<code>flow.allNodeData</code>  </li></ol><p><strong>注意</strong>：不要使用自带的方法<code>formJSON</code>，没有遍历节点右侧展示信息会出错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 渲染画布</span><br><span class="line">const renderGraph = (cells) =&gt; &#123;</span><br><span class="line">    // 清空数据 画布</span><br><span class="line">    flow.graph.clearCells()</span><br><span class="line">    for (const key in flow.allNodeData) &#123;</span><br><span class="line">        delete flow.allNodeData[key]</span><br><span class="line">    &#125;</span><br><span class="line">    cells.forEach(cell =&gt; &#123;</span><br><span class="line">        if (cell.shape !== &#x27;edge&#x27;) &#123;</span><br><span class="line">            flow.allNodeData[cell.id] = cloneDeep(cell.data)</span><br><span class="line">            flow.graph.addNode(cell)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    cells.forEach(cell =&gt; &#123;</span><br><span class="line">        if (cell.shape === &#x27;edge&#x27;) &#123;</span><br><span class="line">            flow.graph.addEdge(cell)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>完成基本业务逻辑，其余如判断是否是单一节点之类的，在补充代码就好</li></ol>]]></content>
      
      
      <categories>
          
          <category> 可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>

<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sfgdfgdfgs</title>
      <link href="/2021/12/10/hello-world/"/>
      <url>/2021/12/10/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>闭包是一个可以访问外部作用域的内部函数，即使这个外部作用域已经执行结束。</p><p><strong>Tip:</strong> 闭包变量是存在堆上的，就算是基本类型也是如此，如果存在栈上的话，函数执行完就被销毁</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        console.log(new Date, i);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(new Date, i, &#x27;main&#x27;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">2017-03-18T00:43:45.873Z 5 main</span><br><span class="line"></span><br><span class="line">2017-03-18T00:43:46.866Z 5</span><br><span class="line">2017-03-18T00:43:46.868Z 5</span><br><span class="line">2017-03-18T00:43:46.868Z 5</span><br><span class="line">2017-03-18T00:43:46.868Z 5</span><br><span class="line">2017-03-18T00:43:46.868Z 5</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="如何输出-5-gt-0-1-2-3-4"><a href="#如何输出-5-gt-0-1-2-3-4" class="headerlink" title="如何输出 5 -&gt; 0,1,2,3,4"></a>如何输出 5 -&gt; 0,1,2,3,4</h4><h5 id="1-闭包"><a href="#1-闭包" class="headerlink" title="1. 闭包"></a>1. 闭包</h5><p>IIFE（声明即执行的函数表达式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    (function(j) &#123;  // j = i</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(new Date, j);</span><br><span class="line">        &#125;, 1000);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(new Date, i);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>或setTimeout的参数设置</p><figure class="highlight plaintext"><figcaption><span>(var i </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    setTimeout(function(j) &#123;</span><br><span class="line">        console.log(new Date, j);</span><br><span class="line">    &#125;, 1000, i); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(new Date, i);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="追问"><a href="#追问" class="headerlink" title="追问"></a>追问</h2><p>期望代码的输出变成 0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5，并且要求原有的代码块中的循环和两处 console.log 不变。<br>代码执行时，立即输出 0，之后每隔 1 秒依次输出 1,2,3,4，循环结束后在大概第 5 秒的时候输出 5<br>var i 不变</p><h4 id="粗暴版"><a href="#粗暴版" class="headerlink" title="粗暴版"></a>粗暴版</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    (function(j) &#123;</span><br><span class="line">        setTimeout(function() &#123;</span><br><span class="line">            console.log(new Date, j);</span><br><span class="line">        &#125;, 1000 * j);  // 这里修改 0~4 的定时器时间</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123; // 这里增加定时器，超时设置为 5 秒</span><br><span class="line">    console.log(new Date, i);</span><br><span class="line">&#125;, 1000 * i);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="正常版"><a href="#正常版" class="headerlink" title="正常版"></a>正常版</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const tasks = [];</span><br><span class="line">for (var i = 0; i &lt; 5; i++) &#123;   // 这里 i 的声明不能改成 let，如果要改该怎么做？</span><br><span class="line">    ((j) =&gt; &#123;</span><br><span class="line">        tasks.push(new Promise((resolve) =&gt; &#123;</span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                console.log(new Date, j);</span><br><span class="line">                resolve();  // 这里一定要 resolve，否则代码不会按预期 work</span><br><span class="line">            &#125;, 1000 * j);   // 定时器的超时时间逐步增加</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Promise.all(tasks).then(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(new Date, i);</span><br><span class="line">    &#125;, 1000);   // 注意这里只需要把超时设置为 1 秒</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="优雅版"><a href="#优雅版" class="headerlink" title="优雅版"></a>优雅版</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">const tasks = []; // 这里存放异步操作的 Promise</span><br><span class="line">const output = (i) =&gt; new Promise((resolve) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(new Date, i);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;, 1000 * i);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 生成全部的异步操作</span><br><span class="line">for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">    tasks.push(output(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 异步操作完成之后，输出最后的 i</span><br><span class="line">Promise.all(tasks).then(() =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        console.log(new Date, i);</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="ES7"><a href="#ES7" class="headerlink" title="ES7"></a>ES7</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 模拟其他语言中的 sleep，实际上可以是任何异步操作</span><br><span class="line">const sleep = (timeountMS) =&gt; new Promise((resolve) =&gt; &#123;</span><br><span class="line">    setTimeout(resolve, timeountMS);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">(async () =&gt; &#123;  // 声明即执行的 async 函数表达式</span><br><span class="line">    for (var i = 0; i &lt; 5; i++) &#123;</span><br><span class="line">        if (i &gt; 0) &#123;</span><br><span class="line">            await sleep(1000);</span><br><span class="line">        &#125;</span><br><span class="line">        console.log(new Date, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    await sleep(1000);</span><br><span class="line">    console.log(new Date, i);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
